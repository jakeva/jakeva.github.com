'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/haikus/Biking/','title':"Biking",'content':"I forgot how fun\nIt can be to ride a bike\nWhile shooting a gun\n"});index.add({'id':1,'href':'/haikus/','title':"Haikus",'content':""});index.add({'id':2,'href':'/haikus/Fat/','title':"Fat",'content':"My girlfriend is fat\nAs fat as a potato\nFull of fat fat shit\n"});index.add({'id':3,'href':'/haikus/Movie/','title':"Movie",'content':"Watching a movie\nWithout popcorn is not good\nIt is very dumb\n"});index.add({'id':4,'href':'/blog/','title':"Blog",'content':""});index.add({'id':5,'href':'/haikus/Chris%20Bacon/','title':"Chris Bacon",'content':"We can talk about\nThe haikus Chris bacon sir\nAny time you wish\n"});index.add({'id':6,'href':'/blog/rails-v-phoenix/','title':"Rails v Phoenix",'content':"fwiw I think I now have roughly the same amount of experience in both rails and phoenix which doesn\u0026rsquo;t by any means make me an expert pro with blog worthy opinions, but I do think I slightly prefer elixir/phx. I\u0026rsquo;ve started a handful of side projects recently and I keep finding myself starting them with elixir. I think I just \u0026lsquo;get it\u0026rsquo; better, maybe the magic of rails makes it hard to feel that way for me. 12:19 or maybe it was that i learned rails first and learning phx second made it a gentler learning curve\n"});index.add({'id':7,'href':'/haikus/Singing/','title':"Singing",'content':"Someone is singing\nIn the middle of the night\nOutside my window\n"});index.add({'id':8,'href':'/haikus/Earthquakes/','title':"Earthquakes",'content':"The earth shakes at times\nIt is most unwelcome here\nAmong us earthlings\n"});index.add({'id':9,'href':'/blog/how-i-post-to-this-blog-using-ios-shortcuts-and-pythonista/','title':"How I post to this blog using iOS Shortcuts and Pythonista",'content':"I\u0026rsquo;ve had this blog for many years, and basically never posted anything. I wanted to become better about that, so I\u0026rsquo;ve been writing more haikus and trying to write up some of my home projects. My blog uses Jekyll and is hosted on Github Pages which already makes it pretty easy to write content but I wanted to see if I could make it even easier. I started with a \u0026ldquo;create new haiku\u0026rdquo; shortcut. This way anytime I have an idea for a haiku it doesn\u0026rsquo;t matter where I am, as long as I have an internet connection on my phone I can post a new one easily.\nSo, I began playing with iOS Shortcuts. I wanted a button on my phone that would let me write and post to my blog without needing anything else. The solution I came up with uses a bit of Python in Pythonista for some formatting, as well as Working Copy for the git actions.\nUnfornately, the only way to share an iOS shortcut is to share it directly. I wanted to export and paste a JSON payload here or something so others could edit and import easily, but it looks like the only way is to share a public link to it. So, here\u0026rsquo;s my shortcut for writing and posting a haiku. With a little editing it should be easy enough to change if you wanted to rework it to post to your own blog. It assumes you have the Working Copy app I linked above, as well as a Pythonista script.\nHere are the actions it performs:\n Pull the latest changes from your blog repo Ask for the name of the Haiku Executes a search in Giphy for the given title and lets you choose your favorite gif Stages the chosen gif in /assets in your repo Asks for the content of the Haiku. Adding an empty line between each line of content renders the content on new lines. I haven\u0026rsquo;t figured this part out yet, but if you don\u0026rsquo;t do this the whole haiku ends up on one line. It then sends the input to the Pythonista script to format it as Jekyll front matter It takes the resulting formatted content and stages it as a new file in your repo It commits the changes to your repo and pushes to remote It then texts my girlfriend to let her know there\u0026rsquo;s a new haiku (I haven\u0026rsquo;t tested this with other people, but I expect that unless you have her number it won\u0026rsquo;t work for you)  So now the only piece missing is the Pythonista script. Here it is:\nfrom webbrowser import open from datetime import date from urllib.parse import quote, unquote import sys import x_callback_url title=sys.argv[1] body=sys.argv[2] gif=quote(sys.argv[3]) haiku='''--- layout: haiku category: Haikus title: ''' + title + ''' --- ''' + body + ''' ![--''' + title + '''--](\\{\\{ site.url \\}\\}/assets/''' + gif + '''.gif)''' x_success = sys.argv[-1] # shortcuts-production://x-callback-url/ic-success/\u0026lt;UUID\u0026gt; x_cancel = x_success.replace('ic-success', 'ic-cancel') x_error = x_success.replace('ic-success', 'ic-error') x_success += '?x-source=Pythonista3' x_success += '\u0026amp;result=' + quote(haiku) x_success += '\u0026amp;datetime=' + quote(str(date.today().strftime('%Y-%m-%d'))) open(x_success) I\u0026rsquo;ve been having fun with this, I\u0026rsquo;ve also made a version that will make a full blog post like this one but haven\u0026rsquo;t used it much since writing long form on an iOS device is not that convenient for me. Anyway, if you\u0026rsquo;re reading this feel free to play with my shortcut and python script! I\u0026rsquo;d love to hear about any projects you use them for!\n"});index.add({'id':10,'href':'/blog/gpg-yubikey-you/','title':"GPG \u0026 YubiKey \u0026 You",'content':"I\u0026rsquo;ve recently taken on the task of setting up my YubiKeys for usage beyond 2 factor auth. Something I learned was that OpenPGP smartcards (which include YubiKeys) have slots for three separate keys: Signature, Encryption, and Authentication.\nMy first goal is to sign git commits with it. Because I am a man of negligible importance, this is in fact NOT an excercise in security. I\u0026rsquo;m taking more of a hobbyist approach. If security was of a more significant concern in my life, I would probably generate my keys in a live booted and air gapped Tails environment.\nWhen I started going down this route I had only in the first place acquired my YubiKey to simplify 2 factor authorization, a flow that I have found myself increasingly spending time due to work and the fact I turn it on everywhere that supports it. I think I was vaguely aware they could be used for more. Regardless, I started by playing around with signing. One of the first things I became aware of was that these things have PIN codes. Never needed them for 2FA, but for managing GPG keys you do. The default user PIN (which is used for signing, among other things) is 123456 and the default admin PIN (used for modifying certain card attributes) is 12345678.\nIf you\u0026rsquo;re following along, I\u0026rsquo;m assuming you have a YubiKey and a recent version of GnuPG.\nConfigure your YubiKey #  To change the PIN (and configure things like your name, language, etc) run gpg --card-edit with your key plugged in. You should see information about your key. Type admin and help to enable and list the available commands. Use passwd to change the user PIN code.\nA little about GPG keys #  GPG keys have capabilities: Sign, Certify, and Encrypt. When you generate a GPG public / private keypair, by default you get a primary pub/priv key and a sub pub/priv key. The primary key can Sign and Certify. The subkey can Encrypt. The reason for this default is that Certify is all powerful. It really is your identity. Delegating powers to other keys signed by it is a good way to reduce your security footprint. If someone steals your encrypt key, all you have to do is revoke it, create a new one, and Certify it with your unstolen primary key. If someone steals your primary private key, well they\u0026rsquo;ve just stolen the ability to revoke your other keys or make new keys as you. So keep it extra safe.\nCreate a GPG key #  It\u0026rsquo;s time to generate your GPG key. gpg --expert --full-gen-key\n Select RSA and RSA(default) Key size: depending on the version of your key  YubiKey NEO - 2048 YubiKey 4 / 5 - 4096   Do it again for the subkey Pick an expiration date Enter your name (must be more than 5 characters) Enter your email Enter an optional comment  Note the ID of the key generated. For fun, let\u0026rsquo;s look at what we\u0026rsquo;ve got so far. Run gpg --edit-key \u0026lt;KEY ID\u0026gt;. You should see something like\nSecret key is available. gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u gpg: next trustdb check due at 2021-03-12 sec rsa4096/98973C978ECA988D created: 2020-03-14 expires: never usage: SC trust: ultimate validity: ultimate ssb rsa4096/015D68EE1E7AC274 created: 2020-03-14 expires: never usage: E [ultimate] (1). Jake Van Alstyne (testing) \u0026lt;email@address.org\u0026gt; The usage of the first key is marked as SC. The second is E. That means the primary key can sign and certify, while the subkey can encrypt.\nIf you have an existing key, you could use it to sign this new one to maintain a chain of custody: gpg -u \u0026lt;your_old_keyid\u0026gt; --sign-key \u0026lt;longid\u0026gt;\nWhile we\u0026rsquo;re here, let\u0026rsquo;s add separate authentication and signing keys to prepare to fill the slots on the YubiKey.\nAuthentication Key #  If you\u0026rsquo;re still at the gpg prompt gpg\u0026gt; from the last command, exit out with Ctrl-C or quit and enter gpg --expert --edit-key \u0026lt;KEY ID\u0026gt;. Notice the extra flag for expert. Now enter the command addkey.\n Pick RSA. Toggle capabilities until only authentication is enabled. You should need to enter each option once: S, E, A Enter Q to finish Pick the key size Pick the expiration (good idea to keep it the same as your master key) Follow the rest of the prompts  Signing Key #  The steps are the same as for the authentication key, only you should only have to deselect Encrypt when picking the key capabilities since by default Signing and Encryption are selected. If you quit out of here now, make sure to save or you\u0026rsquo;ll lose the keys you just made.\nBackup your keys #  It\u0026rsquo;s a good idea to keep a backup somewhere safe.\ngpg --armor --output privkey.sec --export-secret-key \u0026lt;longid\u0026gt; gpg --armor --output subkeys.sec --export-secret-subkeys \u0026lt;longid\u0026gt; gpg --armor --output pubkey.asc --export \u0026lt;longid\u0026gt; Import key to YubiKey #  Make sure the YubiKey is plugged into your computer. Edit the key again, if you aren\u0026rsquo;t already gpg --edit-key \u0026lt;KEY ID\u0026gt;. Enter the command toggle followed by keytocard.\n Enter y to move the primary key Select 1. This moves the signature subkey to the signature slot of the YubiKey.  Enter key 1 (which now should select the encryption key) followed by keytocard. Select 2. This moves the encryption key to the encryption slot.\nEnter key 1 again and then key 2. keytocard and 3. This does the same but for the authentication key.\nNow quit and y for save.\nNow your secret keys are on your YubiKey and can be used for their intended purpose when it\u0026rsquo;s connected.\nConfigure Git for commit signing #  Configure git for GPG signing:\n git config --global commit.gpgsign true git config --global user.signingkey \u0026lt;KEY ID\u0026gt;  And let\u0026rsquo;s restart the GPG agent: gpg-connect-agent reloadagent. Get out of there with /bye. Now when you make a commit, git will require the key to be present. If it\u0026rsquo;s not, the commit will fail. If you want to make a signed commit and see what it looks like in the log, the command for that is git log --show-signature.\ngpg: Signature made Sat Mar 14 03:30:27 2020 MDT gpg: using RSA key 05FFE31C369D8F25CFFF2167FDF8E68C5B840388 gpg: Good signature from \u0026quot;Jake Van Alstyne \u0026lt;jakeva@gmail.com\u0026gt;\u0026quot; [ultimate] Author: Jake Van Alstyne 🎩 \u0026lt;jakeva@gmail.com\u0026gt; Date: Sat Mar 14 03:27:35 2020 -0600 Add YubiKey Post Configure Github for the \u0026lsquo;Verified\u0026rsquo; stamp #  gpg --armor --export \u0026lt;KEY ID\u0026gt; | pbcopy and take it to add as a new GPG key on Github. If you forget this stamp, your commits will still show as signed but \u0026lsquo;Unverified\u0026rsquo;.\nEtc #  Something interesting I noticed is that the gpg-agent caches the key. I removed the key from my computer before making another commit and it still got signed. It looks like this is set in ~/.gnupg/gpg-agent.conf so just a heads up.\n"});index.add({'id':11,'href':'/haikus/Blacklist/','title':"Blacklist",'content':"If you blacklist me\nI will blacklist you right back\nAnd we will not talk\n"});index.add({'id':12,'href':'/haikus/Blogs/','title':"Blogs",'content':"Blogs have to be good\nIf you want people to read\nPeople don’t read mine\n"});index.add({'id':13,'href':'/haikus/Food/','title':"Food",'content':"My girlfriend makes food\nShe learned this art in China\nIt tastes like Chinese\n"});index.add({'id':14,'href':'/haikus/Virus/','title':"Virus",'content':"Is it a virus\nIf it doesn’t go viral\nAnd other questions\n"});index.add({'id':15,'href':'/haikus/Wasting%20time/','title':"Wasting time",'content':"I like wasting time\nAnd I like wasting your time\nI did it again\n"});index.add({'id':16,'href':'/haikus/Haiku/','title':"Haiku",'content':"This is a haiku\nIt checks all of the boxes\nAnd now it is done\n"});index.add({'id':17,'href':'/haikus/Beer/','title':"Beer",'content':"Beer is very good\nI drink it often for fun\nIncluding right now\n"});index.add({'id':18,'href':'/haikus/Richard/','title':"Richard",'content':"Richard has nice breath\nI wish he could write good code\nBut alas he can’t\n"});index.add({'id':19,'href':'/haikus/Typos%20from%20old%20books/','title':"Typos from old books",'content':"A piecture is just\nA pie chart of types of pie\nIn Antarctica\n"});index.add({'id':20,'href':'/haikus/Ramen/','title':"Ramen",'content':"Ramen is so good\nIt has noodles, pork, and stuff\nTo stuff in my face\n"});index.add({'id':21,'href':'/blog/raspberry-pi-btc-node/','title':"Raspberry Pi BTC Node",'content':"Time to put one of my spare Raspberry Pis to work #  I woke up this morning and thought, \u0026lsquo;Hey why not get a full BTC node running on one of those Pis you got laying around?\u0026rsquo; So that\u0026rsquo;s what I\u0026rsquo;m doing today.\nBasics #  This assumes something like Raspbian Lite is already installed and SSH access configured. For Wifi, I use these Edimax USB chips. Configuring them is not too difficult. It boils down a simple config in /etc/network/interfaces/\nauto lo iface lo inet loopback iface eth0 inet dhcp auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-ssid \u0026quot;**YOUR_WIFI**\u0026quot; wpa-psk \u0026quot;**YOUR_PASSWORD**\u0026quot; I\u0026rsquo;m going to install to the 32 GB SD mini card I used for the OS, which means I\u0026rsquo;m not planning on storing all the blocks. And since flash is less resilient than a HDD, I\u0026rsquo;m going to disable SWAP.\nsudo swapoff --all\nInstalling the Bitcoin client #  Go to https://github.com/bitcoin/bitcoin/releases and make not of the newest stable release. For me it\u0026rsquo;s currently 0.19.0.1. So, with that:\ncd ~ git clone -b v0.19.0.1 https://github/com/bitcoin/bitcoin.git cd bitcoin I\u0026rsquo;m going to install it without a wallet, since I only want a node.\n./autogen.sh ./configure CXXFLAGS=\u0026quot;--param ggc-min-expand=1 --param ggc-min-heapsize=32768\u0026quot; --enable-cxx --without-gui --disable-shared --with-pic --disable-tests --disable-bench --enable-upnp-default --disable-wallet make # This will take a long time, best run in tmux or screen, and grab a beer sudo make install Configure #  For this, I want a bitcoin user. sudo adduser bitcoin\nNow switch to the new user sudo su - bitcoin\nAnd create the app data directory mkdir ~/.bitcoin\nAdd the following to ~/.bitcoin/bitcoin.conf\n# makes client run in background daemon=1 # is required by Fail2Ban described below logips=1 # magic RBP optimisations maxconnections=40 maxuploadtarget=5000 # Run without SWAP dbcache=100 maxorphantx=10 maxmempool=50 upnp=1 prune=550 # Only keep the last two days of blocks if like me you are running off a small SD card Return to the pi user exit\nNow create the systemd service to launch the bitcoin client daemon sudo vim /etc/systemd/system/bitcoind.service and give it the following\n[Unit] Description=Bitcoin daemon After=network.target [Service] ExecStart=/usr/local/bin/bitcoind -conf=/home/bitcoin/.bitcoin/bitcoin.conf -pid=/home/bitcoin/.bitcoin/bitcoind.pid # Creates /run/bitcoind owned by bitcoin RuntimeDirectory=bitcoind User=bitcoin Type=forking PIDFile=/home/bitcoin/.bitcoin/bitcoind.pid Restart=on-failure # Hardening measures #################### # Provide a private /tmp and /var/tmp. PrivateTmp=true # Mount /usr, /boot/ and /etc read-only for the process. ProtectSystem=full # Disallow the process and all of its children to gain # new privileges through execve(). NoNewPrivileges=true # Use a new /dev namespace only populated with API pseudo devices # such as /dev/null, /dev/zero and /dev/random. PrivateDevices=true # Deny the creation of writable and executable memory mappings. MemoryDenyWriteExecute=true [Install] WantedBy=multi-user.target Make sure the new service starts on boot sudo systemctl enable bitcoind\nSecurity #  Uncomplicated firewall sudo apt install ufw\nAllow limited ssh sudo ufw limit ssh\nAllow for main net bitcoin traffic sudo ufw allow 8333 comment \u0026quot;Bitcoin mainnet\u0026quot;\nEnable the firewall sudo ufw enable\nPreview the enforced rules sudo ufw status verbose\nInstall Fail2ban sudo apt install fail2ban\nSee the active jails - for now it will only be sshd sudo fail2ban-client status\nStart the bitcoin client sudo systemctl start bitcoind\nIt will take a few minutes to start, but if you want to monitor its progress switch back to the bitcoin user and enter tail -n 100 -f ~/.bitcoin/debug.log\nYou will need to figure out how to forward port 8333 to your new btc node depending on your router.\nCheck it\u0026rsquo;s accessible from the outside world with curl -sL https://bitnodes.earn.com/api/v1/nodes/me-8333/ | jq\n"});index.add({'id':22,'href':'/blog/diy-nas/','title':"Building my own NAS",'content':"First a little background #  I had a couple old NAS storage solutions I pulled out of, well, my storage unit a while back. Tried to set them up in my office and found them to be really difficult to use, but the data on them is still good. So I pulled the disks out and decided to look into upgrading to something newer. After some research, I concluded the existing out-of-the-box solutions available are overpriced for what they offer. I decided I wanted more control over the parts to reduce cost, as well as having more freedom in setting up the server software so I looked into building my own.\nParts #  I used PC Partpicker to help me narrow down what I was looking for. I went in blind hoping I\u0026rsquo;d find a tower suitable for what I wanted, and I think I found the perfect one. Everything else was selected to fit it.\n   Part Price     Fractal Design Node 804 MicroATX Mid Tower Case    This is particularly recommended for a NAS build. Both on Amazon and Newegg, reviews were a bit mixed but for a little over $100 I decided I could handle a few imperfections. Right now I have 7 3.5\u0026rdquo; drives ranging from 1 to 4 TB, and 1 2.5\u0026rdquo; SSD I want to use as the boot disk. Between disk bay utilization and cooling options, this tower promises some pretty interesting flexibility. In their own words, it has a \u0026ldquo;Unique hard drive mounting system, fitting up to 8 x 3.5\u0026rdquo;, 4 x 2.5\u0026rdquo; or up to 10 x 3.5\u0026rdquo;, 2 x 2.5\u0026rdquo; drives HDD/SSD\u0026rdquo; all inside a 13.5 x 12 x 15.3in package. That\u0026rsquo;s 12 slots for hard drives! That should fit my needs perfectly with plenty of room for future upgrades and fit nicely under my desk. $109.99   AMD Ryzen 3 2200G 3.5 GHz Quad-Core Processor    At first I was just interested in picking up a 2 core CPU since I intend on doing nothing with this machine except serving up files to my home network. I\u0026rsquo;m the only user, so I don\u0026rsquo;t need much CPU. However, I found it tricky to pair up a 2 core CPU with a motherboard so I just picked a reasonable quad core. It might be a little over kill, but that\u0026rsquo;s ok. $107.68   I had more trouble finding the right motherboard. I ordered a cheap one early on, forgetting to check how many SATA slots it had. What I ordered was the ASRock B450M-HDV R4.0 Micro ATX AM4 Motherboard    which comes with 4 SATA 6 Gb/s slots. That won\u0026rsquo;t be enough, but for the price, I can slap some extra slots in with the… $69.97   Ziyituod SATA3.0 Card    6 SATA 6 Gb/s PCIe controller. Problem solved. $39.95   Crucial 4GB Single DDR4    Like I don\u0026rsquo;t need much processing power, I don\u0026rsquo;t need much ram. Two sticks of 4 GB DDR4 should do it. $39.98   be Quiet! Pure Rock Slim - CPU Cooler    A concern I had was how loud this thing was going to be. I picked a CPU cooler that promises it gets no louder than 25 Db. The fans that come with the tower might be a different story, but I can worry about those later if it\u0026rsquo;s an issue. Anyway, this thing is pretty cheap too. $33.28   EVGA SuperNOVA 800W    And the final piece is the power supply. Need enough power for up to ten drives, so here we are. $159.99    This brings the total to a little over $500. By comparison you can get an 8 bay NAS by Synology for $931.\nNow I wait #  I haven\u0026rsquo;t got all the parts yet, but I\u0026rsquo;ll post an update when I get it built and have a chance to play with it. I expect there will be some tradeoffs, like the interior will probably be a bit cramped and hard to work with. Maybe it will get a little hot or loud with the four fans. But I\u0026rsquo;m excited, I didn\u0026rsquo;t think I\u0026rsquo;d be able to find a solution that would fit 10 drives in around a square foot of floor space. At less than $500, for me it\u0026rsquo;s a no brainer.\nAnd what\u0026rsquo;s next? #  Of course, I\u0026rsquo;m already thinking down the road. Right now I only have a little over 12 TBs of hard drives ready to put to use (consisting mostly of Bluray backups and music), but at $485 for a 16 TB Drive I am imagining a world where I spend a small fortune for a +13x increase and while I\u0026rsquo;ll probably never need it, it is pretty fun to imagine.\nSmall Update #  Ok so I bought two of the 16 TB drives intending to get a simple mirror up. Funny story, I snapped the plastic on the sata connector of one of them trying to fit it into the case. It is pretty tight in there. Anyway, I bought a third to replace it. But by the time it arrived I decided it was worth trying to salvage the broken one. The pins were still there and I had the broken off plastic piece, so I sort of put it back together delicately and slid it all back in. It worked! The system connected to the drive and now I\u0026rsquo;ve got a healthy 32 TB Raid Z1 pool running in my FreeNAS!\nI\u0026rsquo;m working now on setting up torrenting over OpenVPN among other things. I\u0026rsquo;ll write some of that up in separate blog posts.\n"});index.add({'id':23,'href':'/haikus/denver/','title':"Denver",'content':"I am in Denver\nIt is just like Salt Lake City\nExcept, like, bigger\n"});index.add({'id':24,'href':'/haikus/in-defense-of-the-new-macbook-pro-touchbar/','title':"In defense of the new MacBook Pro touchbar",'content':"It is a fun way\nTo do things you did before\nWhy not something new?\n"});index.add({'id':25,'href':'/haikus/getting-out-of-bed/','title':"Getting out of bed",'content':"No no no no no\nNo no no no no no no\nNo no no no no\n"});index.add({'id':26,'href':'/haikus/waking-up/','title':"Waking up",'content':"Nope, nope, nope, nope, nope\nNope, nope, nope, nope, nope, nope, nope\nNope, nope, nope, nope, nope\n"});index.add({'id':27,'href':'/haikus/space-time/','title':"Space-time",'content':"Time and space are one\nSo it is all relative\nPlease pardon the pun\n"});index.add({'id':28,'href':'/haikus/evening/','title':"Evening",'content':"In the evening\nI am joined by Page and Plant\nbut do not ascend\n"});index.add({'id':29,'href':'/haikus/breakfast/','title':"Breakfast",'content':"The first and best meal\nForget brunch, breakfast is good\nenough to eat twice\n"});index.add({'id':30,'href':'/haikus/chairs/','title':"Chairs",'content':"Made of good hard wood\nSitting straight is important\nIf you like your spine\n"});index.add({'id':31,'href':'/haikus/bubbles/','title':"Bubbles",'content':"Bubbles down the drain\nRemind me I am one too\nOne day I will pop\n"});index.add({'id':32,'href':'/haikus/music/','title':"Music",'content':"Listen to music\nFrom Mozart to the Beatles\nFeel infinity\n"});index.add({'id':33,'href':'/resume/','title':"Resume",'content':"Software Developer #   iOS, OS X, Web #  Interactive 3D Graphics \u0026amp; Data Visualization Specialist #  Ruby, Rails, React, Swift, Objective-C, C, C++ #   EDUCATION #  M.Sc. Computing - University of Utah - 2013 #   Graphics and Visualization Improvements to rational surface analysis in toroidal magnetic confinement fields  B.Sc. Chemical Engineering - University of Utah - 2008 #   High temperation fixed bed mercury sequestration on a non-carbonaceous substrate   Email MeCV - PDF\n \n \n EMPLOYMENT #  Mavenlink - October 2017 - Present #  Senior Software Engineer #   Full stack development. Ruby on Rails backend, React frontend  Munkee Apps LLC - October 2015 - July 2017 #  Senior iOS Developer #   iOS Development, implemented original ideas, bug fixes and feature enhancements for existing products  Selfie Inc. - May 2014 - September 2015 #  Senior iOS Developer #   Core iOS app development. Bug fixes, feature enhancements, etc.  USANA - March 2014 - April 2014 #  iOS Consultant #   Improved enterprise reporting modules in internal iOS application, created a custom tree based reporting view. Short term contract position.  NTTData - September 2013 - February 2014 #  iOS Consultant #   CoreData RESTful APIs Improved and extended existing iOS app. Converted SQLite data model to CoreData, increased responsiveness in remote synchronization, etc  Stem Innovation, LLC - March 2013 - September 2013 #  iOS Developer #   [IZON] iOS App Architecture 3rd party design, developed from the ground up Obj-C main app, C and C++ core modules (ffmpeg, rtp client, etc) Heavy use of NSOperation \u0026amp; NSOperationQueue, GCD, etc Live local / remote video feeds ( via Bonjour, P2P, or Proxy ) Multiple-source data polling  K’nowbe Works, LLC - April 2012 - February 2013 #  Graphics Engineer #   3D Interactive Windows MFC COM components in C++ using OpenGL, OSG, and GLSL Bidirectional A* heuristic path finding Gaussian smoothing Image processing Large point cloud rendering Ray tracing GPU shaders I improved their core graphics engine before using those improvements to develop visually striking fully interactive 3 dimensional engineering design tools. For instance, I built a rapid geodata contouring package. I also built intelligent pipe laying design tools which used proprietary equipment modeling software resulting in incredible realism. Agile development team using Team Foundation Server as our revision control and a custom testing harness for unit tests and TDD  FlexSim Software, LLC - December 2011 - March 2012 #  Windows Developer #   Product development team, maintaining and improving the core products in C++ and custom engine scripting, using the Windows API Made numerous improvements to the main product GUI and design, as well as to the core graphics and simulation engine– improving efficiency and performance, as well as deploying a comprehensive TDD / unit testing framework  University of Utah, Computer Science Department - January 2009 - December 2011 #  Web Developer #   Software Development Center at SCI (Scientific Computing Institute at the University of Utah) developing a web portal for a client. HTML, CSS, JavaScript, jQuery and jQuery-UI  Independent Work #  Freelance Developer / Designer #   Designed, developed and deployed numerous iPhone and Mac OS apps for clients and independently. Submitted dozens of new apps and updates to the App Store. Technologies utilized include Cocoa and Cocoa-touch, UIKit, CoreData, StoreKit, WebKit, SceneKit, QuartzCore, CoreVideo, AVFoundation, QTKit, GameKit, CoreVideo, OpenGL, OpenGL-ES, Cocos–2D, etc OnCue - A motion activated surveillance system for the iSight camera with remote viewing capability via the companion iOS app.  Full product development from concept to deployment on App Store     ETC PROJECTS #  OnCue for OS X #   Homepage Motion / Sound based security app OpenGL, GPUImage, GLSL  BTCMonitor #   A simple OS X menubar application for showing current BTC prices BTCMonitor on App Store  BTC-wallet-hashchecker #   A lightweight OS X command line utility for rapid pw attempts on a given encrypted BTC wallet BTC-wallet-hashchecker on GitHub   PROFESSIONAL PROJECTS #  InstaSize - October 2015 - July 2017 #  Senior iOS Developer #   Photo and Video Editor for Instagram  Selfie for iPhone app - May 2014 - September 2015 #  Senior iOS Developer #   An innovative social networking app for face to face conversations  OnCue for OS X - October 2011 - Present #  Owner / Developer #   Motion / Sound based security app OpenGL, GPUImage, GLSL  OurPlan iPad App - September 2013 - Present #  iOS Developer #   Construction scheduling application Multiple Core Data stores, remote synchronization Custom Calendar UI / UX design / implementation  Lacrosse Stats - November 2013 - February 2014 #  iOS Engineer #   Sports statistics application Core Data, Remote data retrieval, Premium features via In App Purchase Custom UI / UX design / implementation  Izon iPad / iPhone app - May 2013 - September 2013 #  iOS Developer #   Remote video streaming application Core Data, P2P / Proxy Streaming Custom Calendar UI / UX design / implementation   SKILLS #  Software Developer #   Building Intuitive Software Object Oriented Design / Architecture Focused, Elegant, Self-Documenting Code Detailed UI, UX Design 3D Interactive Graphics - OpenGL, GLSL, CUDA Full Stack Developer - Back to Front Development  Problem Solving #   Numerical Techniques Scientific Computing \u0026amp; Visualization CAGD, Image Processing Signal Processing Complexity Analysis Data Analysis / Visualization Geometric Design  Technologies #   Ruby on Rails, React Objective-C, Swift, C, C++ HTML5, CSS, JS, PHP, Python MySQL, SQLite, PostgreSQL OpenGL, GLSL Cocoa, Cocoa-touch, Windows API, MFC, COM, bash, zsh, AppleScript, LaTeX, Git  Other #   Fluent in German 21 years experience playing guitar   TEACHING #  University of Utah, Salt Lake City, Utah USA #   Graduate Instructor  CS 1400 - Introduction to Computer Science   Teaching Assistant  CS 3810 - Computer Organization CS 2420 - Computer Science II CS 2420 - Computer Science II EAE (Engineering Arts and Entertainment Track) CS 1410 - Computer Science I EAE (Engineering Arts and Entertainment Track)     RESEARCH #   Exploration of the Material Point Method on Adaptively Refined Meshes with Hanging Nodes Rational Surface Extraction in Toroidal Magnetic Field Simulations High Temperature Fixed Bed Mercury Sequestration on a Non-Carbonaceous Substrate   HONORS #   Red Hanger Scholarship John Zink Award Chemical Engineering Departmental Full Tuition Scholarship University Honors at Entrance Scholarship  "});})();