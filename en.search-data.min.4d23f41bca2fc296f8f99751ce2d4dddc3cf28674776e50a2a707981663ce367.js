'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/weblog/',title:"Weblog",content:"Blog #  "}),a.add({id:1,href:'/docs/',title:"Docs",content:""}),a.add({id:2,href:'/docs/weblog/chess_and_incompleteness/',title:"Chess and Incompleteness",content:"Chess and Logic #  Chess and Logic, huh?\nThere\u0026rsquo;s something fundamental linking them, and I\u0026rsquo;m not talking about using logic to beat a game of chess. The rules of chess are similar to the axioms of a logical system. This got me thinking, can we demonstrate Kurt Gödel\u0026rsquo;s incompleteness theorem in chess?\nIf you\u0026rsquo;re not familiar (and it\u0026rsquo;s a large and difficult territory should you decide to venture there), the incompleteness theorem says that \u0026ldquo;logic systems can describe true statements that can not be derived using that system\u0026rdquo;.\nI decided I wanted to try, so let\u0026rsquo;s get to it!\nOn Completeness and Consistency #  Completeness and consistency are at the heart of the incompleteness theorem, which concludes there can not be an axiomatic system of logic that is both complete (the system can derive every statement that is true) and consistent (the system can derive false statements).\nOr rather, by fixing consistent in place we\u0026rsquo;d say \u0026ldquo;Any consistent formal logic is incomplete\u0026rdquo;. Meaning, broadly, if you have a set of logical rules there will be statements of that logic that are true but that you can\u0026rsquo;t get to using only those rules.\nWe fix consistent because consistency is a necessity in logic, completeness is just a nice to have. If I offer you a system in which I can prove 1 + 1 = 2, you might be with me so far. But if I follow up with a proof that 1 + 1 also equals 3, it\u0026rsquo;s over before we even start looking into completeness.\nChess #  I think Chess is like a system of logic, so let\u0026rsquo;s play with it a little. There are rules. We can exhaustively enumerate those rules (but we won\u0026rsquo;t, we\u0026rsquo;ll just give some examples).\nLet\u0026rsquo;s focus on pawns.\n Pawns can move ahead by one or two squares on their first move. On any move after their first, and except when attacking, pawns can only move ahead by one square. Attacking (consuming) an enemy piece is only allowed through moving diagonally forward by one square. An attack is allowed if the opposing pawn has just exercised its right in its first move to move two squares instead of one and your pawn would otherwise normally be able to attack if the opposing pawn had only moved ahead one square instead of two. (This is the only example of an attack in chess where an opposing piece can be consumed by moving to a square it does not occupy. It is a rule that surprises new chess players and leads to accusations of cheating, but it is a real rule and it is called En Passant- French for \u0026ldquo;in passing\u0026rdquo;) Finally, if a pawn reaches the opposite side of the board it can be turned into any piece (usually a queen) except the king.  Now you can see why I am not going to attempt to list all the rules of all the pieces, it would be very time consuming. And we can all agree there are in fact rules of chess laid out elsewhere. The point isn\u0026rsquo;t what those rules are, it\u0026rsquo;s what we can do with them.\nExperienced chess players will likely agree a game of chess can be a fascinating expression of decisions. Indeed, observing some of the games of the grandmasters like Magnus Carlsen can put your jaw on the floor. They\u0026rsquo;re like works of art, beautiful landscapes or orchestral symphonies in their own way.\nThese rules are analogous to the rules of oh, let\u0026rsquo;s take algebra. There\u0026rsquo;s addition, subtraction, multiplication, and division. There are rules about associativity, commutativity, etc.\nSo if we can agree that the rules of chess are analogous to an axiomatic logical system what can we do with that? Can we demonstrate the incompleteness theorem in chess?\nI think we can. I think it might not even be that hard. We can at least try. All we have to do is wrap our heads around completeness and consistency in the rules of chess. But before we do that, let\u0026rsquo;s discuss the chess analogue of true and false statements in logic.\nValid Chessboard Configurations #  What is a valid board configuration? One that doesn\u0026rsquo;t violate any of the rules? Given a random chess board with pieces in various positions it can be hard to tell if that state was achieved by starting with neat rows of pieces in their legal starting position and by following the rules, or if they were just chaotically and randomly placed there. Furthermore, there\u0026rsquo;s not a good way to say a given board is in violation of any of the rules if the rules primarily concern themselves with transitions between board states. That is, the rules are mostly about moves. But luckily for us, there are rules we can use to immediately detect an invalid board configuration, such as that each player should not have more than one king. A pawn can not become a king by reaching the end of the board. So you could easily tell a board had been arrived at illegally if there were more than two kings on it.\nCompleteness in Chess #  Completeness in a logic system means that every truthful expression can be derived using the logical system. What does completeness in chess mean? Logic concerns itself with truth, chess concerns itself with winning chess. That is to say achieving checkmate. Could completeness in chess mean that every checkmate can be derived using the rules of chess? That sounds vaguely promising. We can probably be more general, though. Let\u0026rsquo;s try completeness in chess means every valid board configuration can be derived using the rules.\nConsistency in Chess #  Consistency in a logic system means that no false expressions can be derived using the logical system. What does consistency in chess mean? I\u0026rsquo;d say it means something like \u0026ldquo;you can\u0026rsquo;t get to an invalid board state by playing by the rules\u0026rdquo;. That sounds promising. Chess is a consistent system if by following the rules you don\u0026rsquo;t end up with a board configuration that is illegal. It is consistent if by following the rules you never end up with more than 2 kings on the board.\nSimilar to how we can derive the fundamental theorem of algebra, we can play a game of chess and end in a valid configuration of the board (and also checkmate).\nWe can also play a game of chess and walk away from it having followed all the rules but before anyone achieves checkmate. We don\u0026rsquo;t even have to call it a draw, we can just mutually agree to walk away and pretend it never happened. The configuration of the board at that point is still legally derived, even if somewhat uninteresting compared to a game that concluded in a checkmate.\nThis is similar to a mathematical proof which stops before reaching an interesting statement. You have followed all the rules to an unsatisfying end. You let us all down. You should be ashamed. Why have you done this?\nIs Chess Complete? #  A critical element of the incompleteness theorem is self reference, or Hofstadter\u0026rsquo;s strange loops. Kurt Gödel derived a statement in a logic system that said of itself \u0026ldquo;I am not derivable\u0026rdquo;. But it was just derived! If the statement was true, then there is a true statement that cannot be derived (ignoring the fact we clearly just derived it) by the system therefore the system cannot be complete. If the statement was false, then there is a false statement derived by the system, therefore the system could not be consistent.\nKurt Gödel proved in a formal logical system something about formal logical systems involving proofs. This is meta, and indeed his proof was meta too. He used a formal logical system to make a statement about the formal logical system which was inconsistent with itself while being a totally valid expression of the system.\nThis would be like arriving at a checkmate in chess after only following the rules in which a paradoxical statement about chess was expressed. That is to say, where each of the pieces had a word printed on them and when played a certain way, the outcome is simultaneously a valid checkmate but also the words on the pieces spell out \u0026ldquo;I am a board configuration that can not be arrived at by following the rules of chess\u0026rdquo;.\nParadox time #  If that sentence is true, then the game we just legally played was actually arrived at illegally (even if we\u0026rsquo;re doubly sure we followed the rules). This game of chess says that there are valid board configurations in chess that can not be arrived at legally, and therefore chess is incomplete.\nIf that sentence is false, then we just played a legal game that resulted in a statement about chess that is not true and therefore chess is inconsistent.\nChess can therefore not be complete if it is consistent, and it can not be consistent if it is complete.\nIn order to verify this, are there valid configurations of chess boards that can not be achieved by following the rules? Certainly. Put all 32 normal starting pieces in the lower half of the board, alternating in color. There is no way to get into that state following the rules, but nothing about that state is in violation of any rules and is therefore valid.\nConclusion #  The incompleteness theorem is a brilliant and agile attack on formal logical systems and it brought numerous prominent mathematicians of the period to their knees, in particular Bertrand Russell and his efforts in producing the Principia Mathematica which is probably for the best since it takes hundreds of pages of dense symbols to arrive at the conclusion that 1 + 1 = 2.\nChess is not unlike a formalized logic. It has rules, and those rules can be used to carry the weight of ideas. Including ideas about those rules.\nThis post was in part inspired by this post which goes much deeper, provides more history and more details while taking the angle of actually implementing Gödel\u0026rsquo;s arithmetic in Lisp.\n"}),a.add({id:3,href:'/docs/weblog/how-i-post-to-this-blog-using-ios-shortcuts-and-pythonista/',title:"How I (used to) post to this blog using iOS Shortcuts and Pythonista",content:"EDIT: This blog is now hosted using Hugo, not Jekyll. I have to find a way to migrate what I\u0026rsquo;ve described here.\nI\u0026rsquo;ve had this blog for many years, and basically never posted anything. I wanted to become better about that, so I\u0026rsquo;ve been writing more haikus and trying to write up some of my home projects. My blog uses Jekyll and is hosted on Github Pages which already makes it pretty easy to write content but I wanted to see if I could make it even easier. I started with a \u0026ldquo;create new haiku\u0026rdquo; shortcut. This way anytime I have an idea for a haiku it doesn\u0026rsquo;t matter where I am, as long as I have an internet connection on my phone I can post a new one easily.\nSo, I began playing with iOS Shortcuts. I wanted a button on my phone that would let me write and post to my blog without needing anything else. The solution I came up with uses a bit of Python in Pythonista for some formatting, as well as Working Copy for the git actions.\nUnfornately, the only way to share an iOS shortcut is to share it directly. I wanted to export and paste a JSON payload here or something so others could edit and import easily, but it looks like the only way is to share a public link to it. So, here\u0026rsquo;s my shortcut for writing and posting a haiku. With a little editing it should be easy enough to change if you wanted to rework it to post to your own blog. It assumes you have the Working Copy app I linked above, as well as a Pythonista script.\nHere are the actions it performs:\n Pull the latest changes from your blog repo Ask for the name of the Haiku Executes a search in Giphy for the given title and lets you choose your favorite gif Stages the chosen gif in /assets in your repo Asks for the content of the Haiku. Adding an empty line between each line of content renders the content on new lines. I haven\u0026rsquo;t figured this part out yet, but if you don\u0026rsquo;t do this the whole haiku ends up on one line. It then sends the input to the Pythonista script to format it as Jekyll front matter It takes the resulting formatted content and stages it as a new file in your repo It commits the changes to your repo and pushes to remote It then texts my girlfriend to let her know there\u0026rsquo;s a new haiku (I haven\u0026rsquo;t tested this with other people, but I expect that unless you have her number it won\u0026rsquo;t work for you)  So now the only piece missing is the Pythonista script. Here it is:\nfrom webbrowser import open from datetime import date from urllib.parse import quote, unquote import sys import x_callback_url title=sys.argv[1] body=sys.argv[2] gif=quote(sys.argv[3]) haiku='''--- layout: haiku category: Haikus title: ''' + title + ''' --- ''' + body + ''' ![--''' + title + '''--](\\{\\{ site.url \\}\\}/assets/''' + gif + '''.gif)''' x_success = sys.argv[-1] # shortcuts-production://x-callback-url/ic-success/\u0026lt;UUID\u0026gt; x_cancel = x_success.replace('ic-success', 'ic-cancel') x_error = x_success.replace('ic-success', 'ic-error') x_success += '?x-source=Pythonista3' x_success += '\u0026amp;result=' + quote(haiku) x_success += '\u0026amp;datetime=' + quote(str(date.today().strftime('%Y-%m-%d'))) open(x_success) I\u0026rsquo;ve been having fun with this, I\u0026rsquo;ve also made a version that will make a full blog post like this one but haven\u0026rsquo;t used it much since writing long form on an iOS device is not that convenient for me. Anyway, if you\u0026rsquo;re reading this feel free to play with my shortcut and python script! I\u0026rsquo;d love to hear about any projects you use them for!\n"}),a.add({id:4,href:'/docs/weblog/gpg-yubikey-you/',title:"GPG \u0026 YubiKey \u0026 You",content:"I\u0026rsquo;ve recently taken on the task of setting up my YubiKeys for usage beyond 2 factor auth. Something I learned was that OpenPGP smartcards (which include YubiKeys) have slots for three separate keys: Signature, Encryption, and Authentication.\nMy first goal is to sign git commits with it. Because I am a man of negligible importance, this is in fact NOT an excercise in security. I\u0026rsquo;m taking more of a hobbyist approach. If security was of a more significant concern in my life, I would probably generate my keys in a live booted and air gapped Tails environment.\nWhen I started going down this route I had only in the first place acquired my YubiKey to simplify 2 factor authorization, a flow that I have found myself increasingly spending time due to work and the fact I turn it on everywhere that supports it. I think I was vaguely aware they could be used for more. Regardless, I started by playing around with signing. One of the first things I became aware of was that these things have PIN codes. Never needed them for 2FA, but for managing GPG keys you do. The default user PIN (which is used for signing, among other things) is 123456 and the default admin PIN (used for modifying certain card attributes) is 12345678.\nIf you\u0026rsquo;re following along, I\u0026rsquo;m assuming you have a YubiKey and a recent version of GnuPG.\nConfigure your YubiKey #  To change the PIN (and configure things like your name, language, etc) run gpg --card-edit with your key plugged in. You should see information about your key. Type admin and help to enable and list the available commands. Use passwd to change the user PIN code.\nA little about GPG keys #  GPG keys have capabilities: Sign, Certify, and Encrypt. When you generate a GPG public / private keypair, by default you get a primary pub/priv key and a sub pub/priv key. The primary key can Sign and Certify. The subkey can Encrypt. The reason for this default is that Certify is all powerful. It really is your identity. Delegating powers to other keys signed by it is a good way to reduce your security footprint. If someone steals your encrypt key, all you have to do is revoke it, create a new one, and Certify it with your unstolen primary key. If someone steals your primary private key, well they\u0026rsquo;ve just stolen the ability to revoke your other keys or make new keys as you. So keep it extra safe.\nCreate a GPG key #  It\u0026rsquo;s time to generate your GPG key. gpg --expert --full-gen-key\n Select RSA and RSA(default) Key size: depending on the version of your key  YubiKey NEO - 2048 YubiKey 4 / 5 - 4096   Do it again for the subkey Pick an expiration date Enter your name (must be more than 5 characters) Enter your email Enter an optional comment  Note the ID of the key generated. For fun, let\u0026rsquo;s look at what we\u0026rsquo;ve got so far. Run gpg --edit-key \u0026lt;KEY ID\u0026gt;. You should see something like\nSecret key is available. gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u gpg: next trustdb check due at 2021-03-12 sec rsa4096/98973C978ECA988D created: 2020-03-14 expires: never usage: SC trust: ultimate validity: ultimate ssb rsa4096/015D68EE1E7AC274 created: 2020-03-14 expires: never usage: E [ultimate] (1). m3ta4a (testing) \u0026lt;email@address.org\u0026gt; The usage of the first key is marked as SC. The second is E. That means the primary key can sign and certify, while the subkey can encrypt.\nIf you have an existing key, you could use it to sign this new one to maintain a chain of custody: gpg -u \u0026lt;your_old_keyid\u0026gt; --sign-key \u0026lt;longid\u0026gt;\nWhile we\u0026rsquo;re here, let\u0026rsquo;s add separate authentication and signing keys to prepare to fill the slots on the YubiKey.\nAuthentication Key #  If you\u0026rsquo;re still at the gpg prompt gpg\u0026gt; from the last command, exit out with Ctrl-C or quit and enter gpg --expert --edit-key \u0026lt;KEY ID\u0026gt;. Notice the extra flag for expert. Now enter the command addkey.\n Pick RSA. Toggle capabilities until only authentication is enabled. You should need to enter each option once: S, E, A Enter Q to finish Pick the key size Pick the expiration (good idea to keep it the same as your master key) Follow the rest of the prompts  Signing Key #  The steps are the same as for the authentication key, only you should only have to deselect Encrypt when picking the key capabilities since by default Signing and Encryption are selected. If you quit out of here now, make sure to save or you\u0026rsquo;ll lose the keys you just made.\nBackup your keys #  It\u0026rsquo;s a good idea to keep a backup somewhere safe.\ngpg --armor --output privkey.sec --export-secret-key \u0026lt;longid\u0026gt; gpg --armor --output subkeys.sec --export-secret-subkeys \u0026lt;longid\u0026gt; gpg --armor --output pubkey.asc --export \u0026lt;longid\u0026gt; Import key to YubiKey #  Make sure the YubiKey is plugged into your computer. Edit the key again, if you aren\u0026rsquo;t already gpg --edit-key \u0026lt;KEY ID\u0026gt;. Enter the command toggle followed by keytocard.\n Enter y to move the primary key Select 1. This moves the signature subkey to the signature slot of the YubiKey.  Enter key 1 (which now should select the encryption key) followed by keytocard. Select 2. This moves the encryption key to the encryption slot.\nEnter key 1 again and then key 2. keytocard and 3. This does the same but for the authentication key.\nNow quit and y for save.\nNow your secret keys are on your YubiKey and can be used for their intended purpose when it\u0026rsquo;s connected.\nConfigure Git for commit signing #  Configure git for GPG signing:\n git config --global commit.gpgsign true git config --global user.signingkey \u0026lt;KEY ID\u0026gt;  And let\u0026rsquo;s restart the GPG agent: gpg-connect-agent reloadagent. Get out of there with /bye. Now when you make a commit, git will require the key to be present. If it\u0026rsquo;s not, the commit will fail. If you want to make a signed commit and see what it looks like in the log, the command for that is git log --show-signature.\ngpg: Signature made Sat Mar 14 03:30:27 2020 MDT gpg: using RSA key 05FFE31C369D8F25CFFF2167FDF8E68C5B840388 gpg: Good signature from \u0026quot;m3ta4a \u0026lt;jakeva@gmail.com\u0026gt;\u0026quot; [ultimate] Author: m3ta4a 🎩 \u0026lt;jakeva@gmail.com\u0026gt; Date: Sat Mar 14 03:27:35 2020 -0600 Add YubiKey Post Configure Github for the \u0026lsquo;Verified\u0026rsquo; stamp #  gpg --armor --export \u0026lt;KEY ID\u0026gt; | pbcopy and take it to add as a new GPG key on Github. If you forget this stamp, your commits will still show as signed but \u0026lsquo;Unverified\u0026rsquo;.\nEtc #  Something interesting I noticed is that the gpg-agent caches the key. I removed the key from my computer before making another commit and it still got signed. It looks like this is set in ~/.gnupg/gpg-agent.conf so just a heads up.\n"}),a.add({id:5,href:'/docs/weblog/raspberry-pi-btc-node/',title:"Raspberry Pi BTC Node",content:"Time to put one of my spare Raspberry Pis to work #  I woke up this morning and thought, \u0026lsquo;Hey why not get a full BTC node running on one of those Pis you got laying around?\u0026rsquo; So that\u0026rsquo;s what I\u0026rsquo;m doing today.\nBasics #  This assumes something like Raspbian Lite is already installed and SSH access configured. For Wifi, I use these Edimax USB chips. Configuring them is not too difficult. It boils down a simple config in /etc/network/interfaces/\nauto lo iface lo inet loopback iface eth0 inet dhcp auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-ssid \u0026quot;**YOUR_WIFI**\u0026quot; wpa-psk \u0026quot;**YOUR_PASSWORD**\u0026quot; I\u0026rsquo;m going to install to the 32 GB SD mini card I used for the OS, which means I\u0026rsquo;m not planning on storing all the blocks. And since flash is less resilient than a HDD, I\u0026rsquo;m going to disable SWAP.\nsudo swapoff --all\nInstalling the Bitcoin client #  Go to https://github.com/bitcoin/bitcoin/releases and make not of the newest stable release. For me it\u0026rsquo;s currently 0.19.0.1. So, with that:\ncd ~ git clone -b v0.19.0.1 https://github/com/bitcoin/bitcoin.git cd bitcoin I\u0026rsquo;m going to install it without a wallet, since I only want a node.\n./autogen.sh ./configure CXXFLAGS=\u0026quot;--param ggc-min-expand=1 --param ggc-min-heapsize=32768\u0026quot; --enable-cxx --without-gui --disable-shared --with-pic --disable-tests --disable-bench --enable-upnp-default --disable-wallet make # This will take a long time, best run in tmux or screen, and grab a beer sudo make install Configure #  For this, I want a bitcoin user. sudo adduser bitcoin\nNow switch to the new user sudo su - bitcoin\nAnd create the app data directory mkdir ~/.bitcoin\nAdd the following to ~/.bitcoin/bitcoin.conf\n# makes client run in background daemon=1 # is required by Fail2Ban described below logips=1 # magic RBP optimisations maxconnections=40 maxuploadtarget=5000 # Run without SWAP dbcache=100 maxorphantx=10 maxmempool=50 upnp=1 prune=550 # Only keep the last two days of blocks if like me you are running off a small SD card Return to the pi user exit\nNow create the systemd service to launch the bitcoin client daemon sudo vim /etc/systemd/system/bitcoind.service and give it the following\n[Unit] Description=Bitcoin daemon After=network.target [Service] ExecStart=/usr/local/bin/bitcoind -conf=/home/bitcoin/.bitcoin/bitcoin.conf -pid=/home/bitcoin/.bitcoin/bitcoind.pid # Creates /run/bitcoind owned by bitcoin RuntimeDirectory=bitcoind User=bitcoin Type=forking PIDFile=/home/bitcoin/.bitcoin/bitcoind.pid Restart=on-failure # Hardening measures #################### # Provide a private /tmp and /var/tmp. PrivateTmp=true # Mount /usr, /boot/ and /etc read-only for the process. ProtectSystem=full # Disallow the process and all of its children to gain # new privileges through execve(). NoNewPrivileges=true # Use a new /dev namespace only populated with API pseudo devices # such as /dev/null, /dev/zero and /dev/random. PrivateDevices=true # Deny the creation of writable and executable memory mappings. MemoryDenyWriteExecute=true [Install] WantedBy=multi-user.target Make sure the new service starts on boot sudo systemctl enable bitcoind\nSecurity #  Uncomplicated firewall sudo apt install ufw\nAllow limited ssh sudo ufw limit ssh\nAllow for main net bitcoin traffic sudo ufw allow 8333 comment \u0026quot;Bitcoin mainnet\u0026quot;\nEnable the firewall sudo ufw enable\nPreview the enforced rules sudo ufw status verbose\nInstall Fail2ban sudo apt install fail2ban\nSee the active jails - for now it will only be sshd sudo fail2ban-client status\nStart the bitcoin client sudo systemctl start bitcoind\nIt will take a few minutes to start, but if you want to monitor its progress switch back to the bitcoin user and enter tail -n 100 -f ~/.bitcoin/debug.log\nYou will need to figure out how to forward port 8333 to your new btc node depending on your router.\nCheck it\u0026rsquo;s accessible from the outside world with curl -sL https://bitnodes.earn.com/api/v1/nodes/me-8333/ | jq\n"}),a.add({id:6,href:'/docs/weblog/diy-nas/',title:"Building my own NAS",content:"First a little background #  I had a couple old NAS storage solutions I pulled out of, well, my storage unit a while back. Tried to set them up in my office and found them to be really difficult to use, but the data on them is still good. So I pulled the disks out and decided to look into upgrading to something newer. After some research, I concluded the existing out-of-the-box solutions available are overpriced for what they offer. I decided I wanted more control over the parts to reduce cost, as well as having more freedom in setting up the server software so I looked into building my own.\nParts #  I used PC Partpicker to help me narrow down what I was looking for. I went in blind hoping I\u0026rsquo;d find a tower suitable for what I wanted, and I think I found the perfect one. Everything else was selected to fit it.\n   Part Price     Fractal Design Node 804 MicroATX Mid Tower Case    This is particularly recommended for a NAS build. Both on Amazon and Newegg, reviews were a bit mixed but for a little over $100 I decided I could handle a few imperfections. Right now I have 7 3.5\u0026quot; drives ranging from 1 to 4 TB, and 1 2.5\u0026quot; SSD I want to use as the boot disk. Between disk bay utilization and cooling options, this tower promises some pretty interesting flexibility. In their own words, it has a \u0026ldquo;Unique hard drive mounting system, fitting up to 8 x 3.5\u0026rdquo;, 4 x 2.5\u0026quot; or up to 10 x 3.5\u0026quot;, 2 x 2.5\u0026quot; drives HDD/SSD\u0026quot; all inside a 13.5 x 12 x 15.3in package. That\u0026rsquo;s 12 slots for hard drives! That should fit my needs perfectly with plenty of room for future upgrades and fit nicely under my desk. $109.99   AMD Ryzen 3 2200G 3.5 GHz Quad-Core Processor    At first I was just interested in picking up a 2 core CPU since I intend on doing nothing with this machine except serving up files to my home network. I\u0026rsquo;m the only user, so I don\u0026rsquo;t need much CPU. However, I found it tricky to pair up a 2 core CPU with a motherboard so I just picked a reasonable quad core. It might be a little over kill, but that\u0026rsquo;s ok. $107.68   I had more trouble finding the right motherboard. I ordered a cheap one early on, forgetting to check how many SATA slots it had. What I ordered was the ASRock B450M-HDV R4.0 Micro ATX AM4 Motherboard    which comes with 4 SATA 6 Gb/s slots. That won\u0026rsquo;t be enough, but for the price, I can slap some extra slots in with the… $69.97   Ziyituod SATA3.0 Card    6 SATA 6 Gb/s PCIe controller. Problem solved. $39.95   Crucial 4GB Single DDR4    Like I don\u0026rsquo;t need much processing power, I don\u0026rsquo;t need much ram. Two sticks of 4 GB DDR4 should do it. $39.98   be Quiet! Pure Rock Slim - CPU Cooler    A concern I had was how loud this thing was going to be. I picked a CPU cooler that promises it gets no louder than 25 Db. The fans that come with the tower might be a different story, but I can worry about those later if it\u0026rsquo;s an issue. Anyway, this thing is pretty cheap too. $33.28   EVGA SuperNOVA 800W    And the final piece is the power supply. Need enough power for up to ten drives, so here we are. $159.99    This brings the total to a little over $500. By comparison you can get an 8 bay NAS by Synology for $931.\nNow I wait #  I haven\u0026rsquo;t got all the parts yet, but I\u0026rsquo;ll post an update when I get it built and have a chance to play with it. I expect there will be some tradeoffs, like the interior will probably be a bit cramped and hard to work with. Maybe it will get a little hot or loud with the four fans. But I\u0026rsquo;m excited, I didn\u0026rsquo;t think I\u0026rsquo;d be able to find a solution that would fit 10 drives in around a square foot of floor space. At less than $500, for me it\u0026rsquo;s a no brainer.\nAnd what\u0026rsquo;s next? #  Of course, I\u0026rsquo;m already thinking down the road. Right now I only have a little over 12 TBs of hard drives ready to put to use (consisting mostly of Bluray backups and music), but at $485 for a 16 TB Drive I am imagining a world where I spend a small fortune for a +13x increase and while I\u0026rsquo;ll probably never need it, it is pretty fun to imagine.\nSmall Update #  Ok so I bought two of the 16 TB drives intending to get a simple mirror up. Funny story, I snapped the plastic on the sata connector of one of them trying to fit it into the case. It is pretty tight in there. Anyway, I bought a third to replace it. But by the time it arrived I decided it was worth trying to salvage the broken one. The pins were still there and I had the broken off plastic piece, so I sort of put it back together delicately and slid it all back in. It worked! The system connected to the drive and now I\u0026rsquo;ve got a healthy 32 TB Raid Z1 pool running in my FreeNAS!\nI\u0026rsquo;m working now on setting up torrenting over OpenVPN among other things. I\u0026rsquo;ll write some of that up in separate blog posts.\n"})})()